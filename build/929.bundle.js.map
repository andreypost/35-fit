{"version":3,"file":"929.bundle.js","mappings":"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","sources":["webpack://35-fit/./src/views/Flower.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { userType } from 'types/commonPropTypes'\n// import { createStore, applyMiddleware } from 'redux'\n// import { configureStore } from '@reduxjs/toolkit'\n// import thunk from 'redux-thunk'\n// import axios from 'axios'\nimport empty from 'img/empty_user.png'\n\nconst Flower = ({ user }) => {\n  // function curry(f: { (a: any, b: any, c: any): any; length?: any; apply?: any }) {\n  //     return function curried(this: any, ...args: any[]) {\n  //         if (args.length >= f.length) {\n  //             return f.apply(this, args)\n  //         } else {\n  //             return (...args2: any[]) => {\n  //                 return curried.apply(this, args.concat(args2))\n  //             }\n  //         }\n  //     }\n  // }\n  // function sum(a: number, b: number, c: number) {\n  //     return a + b + c\n  // }\n  const [title, setTitle] = useState({ src: '', word: '', lang: '' }),\n    [initial, setInitial] = useState({ value: '', code: '' }),\n    [pointerEvents, setPointerEvents] = useState(''),\n    languages = [\n      { code: 'fr', lang: 'French' },\n      { code: 'it', lang: 'Italian' },\n      { code: 'de', lang: 'Dutch' },\n      { code: 'ja', lang: 'Japanese' },\n      { code: 'ru', lang: 'Russian' },\n      { code: 'uk', lang: 'Ukrainian' },\n      { code: 'ar', lang: 'Arabic' },\n      { code: 'zh', lang: 'Chinese' },\n    ],\n    languageSet: Set<{ code: string; lang: string }> = new Set(),\n    translationSet: Set<{ word: any; lang: string }> = new Set([\n      { word: initial.value, lang: 'English' },\n    ])\n\n  const getImages = async (\n    translationResults: Set<{ word: any; lang: string }>\n  ) => {\n    // console.log(translationResults)\n    for await (const item of translationResults) {\n      fetch(`https://api.pexels.com/v1/search?query=${item.word}&per_page=1`, {\n        headers: {\n          Authorization:\n            '563492ad6f91700001000001173c2e1310614e4c9a6b3f0fe56afc68',\n          // \"Host\": \"https://andreypost.github.io/35-fit/\"\n          Host: 'http://localhost:8080/',\n        },\n      })\n        .then((response) => response.json())\n        .then((items) =>\n          setTitle({\n            src: items.photos[0].src.medium,\n            word: item.word,\n            lang: item.lang,\n          })\n        )\n        .catch(() => setTitle({ src: empty, word: item.word, lang: item.lang }))\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n    }\n  }\n  const getTranslation = async (\n    languageSet: Set<{ code: string; lang: string }>\n  ) => {\n    for await (const item of languageSet) {\n      await fetch(\n        `https://api.mymemory.translated.net/get?q=${initial.value}&langpair=${initial.code}|${item.code}`\n      )\n        .then((response) => response.json())\n        .then((result) => {\n          setInitial({\n            value: result.responseData.translatedText,\n            code: item.code,\n          })\n          translationSet.add({\n            word: result.responseData.translatedText,\n            lang: item.lang,\n          })\n        })\n        .catch(() => getTranslation(languageSet))\n    }\n    // // const results = await Promise.all(wordSet)\n    await getImages(translationSet).then(() => {\n      setInitial({ value: '', code: '' })\n      setPointerEvents('')\n    })\n  }\n\n  const haldleSubmit = async (e: { preventDefault: () => void }) => {\n    e.preventDefault()\n    setPointerEvents('active')\n    while (languageSet.size < languages.length) {\n      languageSet.add(languages[Math.floor(Math.random() * languages.length)])\n    }\n    languageSet.add({ code: 'es', lang: 'English' }) // lang is 'Spanish', this API does not allow to put two the same languages at a time.\n    getTranslation(languageSet)\n  }\n  return (\n    <>\n      <form action=\"get\" id=\"wordForm\" onSubmit={haldleSubmit}>\n        <input\n          type=\"text\"\n          name=\"initial\"\n          pattern=\"^[a-zA-Z]+$\"\n          required\n          value={initial.value}\n          onChange={(e) => setInitial({ value: e.target.value, code: 'en' })}\n        />\n        <button type=\"submit\" className={pointerEvents}>\n          submit\n        </button>\n      </form>\n      <div>\n        <h2 className=\"title\">\n          language: {title.lang + ', title: ' + title.word}\n        </h2>\n        Image: <img src={title.src} alt=\"\" className=\"image\" />\n      </div>\n    </>\n  )\n}\nexport default Flower\nFlower.propTypes = {\n  user: userType,\n}\n\n/* useEffect(() => {\n  // first variant with generators, native js;\n  let form = document.getElementById('wordForm'),\n  title = document.querySelector('.title'),\n  image = document.querySelector('.image'),\n  lung = [{ 'code': 'fr', 'name': 'French' },\n  { 'code': 'it', 'name': 'Italian' },\n  { 'code': 'de', 'name': 'Dutch' },\n  { 'code': 'ja', 'name': 'Japanese' },\n  { 'code': 'ru', 'name': 'Russian' },\n  { 'code': 'uk', 'name': 'Ukrainian' },\n  { 'code': 'ar', 'name': 'Arabic' },\n  { 'code': 'zh', 'name': 'Chinese' }],\n  set = new Set([{ 'code': 'en', 'name': 'English' }]),\n  initialValue = '',\n  initialCode = 'en-GB',\n  imgSrc = ''\n\nasync function* handleTextInput() {\n  for await (let itemSet of set) {\n      console.log(set)\n      await fetch(`https://api.mymemory.translated.net/get?q=${initialValue}&langpair=${initialCode}|${itemSet.code}`)\n          .then(response => response.json())\n          .then(result => {\n              initialValue = result.responseData.translatedText\n              initialCode = itemSet.code\n              fetch(`https://api.pexels.com/v1/search?query=${initialValue}&per_page=1`, {\n                  \"headers\": {\n                      \"Authorization\": \"563492ad6f91700001000001173c2e1310614e4c9a6b3f0fe56afc68\",\n                      \"Host\": \"https://andreypost.github.io/google-search/\"\n                  }\n              })\n                  .then(response => response.json())\n                  .then(items => imgSrc = items.photos[0].src.medium)\n                  .catch(err => console.log(err))\n          })\n          .catch(err => console.log(err))\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      yield [initialValue, imgSrc, itemSet.name]\n  }\n}\nform.onsubmit = (e) => {\n  e.preventDefault()\n  form.elements[1].style.pointerEvents = 'none'\n  initialValue = form.initial.value\n\n  while (set.size < lung.length - 3) {\n      set.add(lung[Math.floor(Math.random() * lung.length)])\n  }\n\n  (async () => {\n      for await (let [value, src, lung] of handleTextInput()) {\n          title.innerHTML = `${lung} : ` + value\n          image.src = src\n      }\n      form.elements[1].style.pointerEvents = 'unset'\n      form.reset()\n  })()\n}\n}, [])\n*/\n"],"names":["Flower","_ref","user","_useState","useState","src","word","lang","_useState2","_slicedToArray","title","setTitle","_useState3","value","code","_useState4","initial","setInitial","_useState5","_useState6","pointerEvents","setPointerEvents","languages","languageSet","Set","translationSet","getImages","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","translationResults","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","_context2","prev","next","item","_context","fetch","concat","headers","Authorization","Host","then","response","json","items","photos","medium","empty","Promise","resolve","setTimeout","stop","_asyncIterator","sent","done","delegateYield","t1","finish","_x","apply","arguments","getTranslation","_ref3","_callee2","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_loop2","_iterator2","_step2","_context4","_context3","result","responseData","translatedText","add","_x2","haldleSubmit","_ref4","_callee3","e","_context5","preventDefault","size","length","Math","floor","random","_x3","_jsxs","_Fragment","children","action","id","onSubmit","_jsx","type","name","pattern","required","onChange","target","className","alt","propTypes","userType"],"sourceRoot":""}