{"version":3,"sources":["webpack://35fit/./node_modules/@babel/runtime/helpers/esm/asyncIterator.js","webpack://35fit/./src/views/Flower.tsx"],"names":["_asyncIterator","iterable","method","Symbol","asyncIterator","iterator","TypeError","call","useState","src","word","lang","title","setTitle","value","code","initial","setInitial","pointerEvents","setPointerEvents","languages","languageSet","Set","translationSet","getImages","translationResults","item","fetch","headers","Authorization","Host","then","response","json","items","photos","medium","empty","Promise","resolve","setTimeout","getTranslation","result","responseData","translatedText","add","haldleSubmit","e","preventDefault","size","length","Math","floor","random","action","id","onSubmit","type","name","pattern","required","onChange","target","className","alt"],"mappings":"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","file":"924.bundle.js","sourcesContent":["export default function _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) method = iterable[Symbol.asyncIterator];\n    if (method == null && Symbol.iterator) method = iterable[Symbol.iterator];\n  }\n\n  if (method == null) method = iterable[\"@@asyncIterator\"];\n  if (method == null) method = iterable[\"@@iterator\"];\n  if (method == null) throw new TypeError(\"Object is not async iterable\");\n  return method.call(iterable);\n}","import React, { useState } from 'react'\r\n// import { createStore, applyMiddleware } from 'redux'\r\n// import { configureStore } from '@reduxjs/toolkit'\r\n// import thunk from 'redux-thunk'\r\n// import axios from 'axios'\r\nimport empty from 'img/empty_img.png'\r\n\r\nconst Flower: React.FC = () => {\r\n  // function curry(f: { (a: any, b: any, c: any): any; length?: any; apply?: any }) {\r\n  //     return function curried(this: any, ...args: any[]) {\r\n  //         if (args.length >= f.length) {\r\n  //             return f.apply(this, args)\r\n  //         } else {\r\n  //             return (...args2: any[]) => {\r\n  //                 return curried.apply(this, args.concat(args2))\r\n  //             }\r\n  //         }\r\n  //     }\r\n  // }\r\n  // function sum(a: number, b: number, c: number) {\r\n  //     return a + b + c\r\n  // }\r\n  const [title, setTitle] = useState({ src: '', word: '', lang: '' }),\r\n    [initial, setInitial] = useState({ value: '', code: '' }),\r\n    [pointerEvents, setPointerEvents] = useState(''),\r\n    languages = [\r\n      { code: 'fr', lang: 'French' },\r\n      { code: 'it', lang: 'Italian' },\r\n      { code: 'de', lang: 'Dutch' },\r\n      { code: 'ja', lang: 'Japanese' },\r\n      { code: 'ru', lang: 'Russian' },\r\n      { code: 'uk', lang: 'Ukrainian' },\r\n      { code: 'ar', lang: 'Arabic' },\r\n      { code: 'zh', lang: 'Chinese' },\r\n    ],\r\n    languageSet: Set<{ code: string; lang: string }> = new Set(),\r\n    translationSet: Set<{ word: any; lang: string }> = new Set([\r\n      { word: initial.value, lang: 'English' },\r\n    ])\r\n\r\n  const getImages = async (\r\n    translationResults: Set<{ word: any; lang: string }>,\r\n  ) => {\r\n    // console.log(translationResults)\r\n    for await (const item of translationResults) {\r\n      fetch(`https://api.pexels.com/v1/search?query=${item.word}&per_page=1`, {\r\n        headers: {\r\n          Authorization:\r\n            '563492ad6f91700001000001173c2e1310614e4c9a6b3f0fe56afc68',\r\n          // \"Host\": \"https://andreypost.github.io/35-fit/\"\r\n          Host: 'http://localhost:8080/',\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((items) =>\r\n          setTitle({\r\n            src: items.photos[0].src.medium,\r\n            word: item.word,\r\n            lang: item.lang,\r\n          }),\r\n        )\r\n        .catch(() => setTitle({ src: empty, word: item.word, lang: item.lang }))\r\n      await new Promise((resolve) => setTimeout(resolve, 2000))\r\n    }\r\n  }\r\n  const getTranslation = async (\r\n    languageSet: Set<{ code: string; lang: string }>,\r\n  ) => {\r\n    for await (const item of languageSet) {\r\n      await fetch(\r\n        `https://api.mymemory.translated.net/get?q=${initial.value}&langpair=${initial.code}|${item.code}`,\r\n      )\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n          setInitial({\r\n            value: result.responseData.translatedText,\r\n            code: item.code,\r\n          })\r\n          translationSet.add({\r\n            word: result.responseData.translatedText,\r\n            lang: item.lang,\r\n          })\r\n        })\r\n        .catch(() => getTranslation(languageSet))\r\n    }\r\n    // // const results = await Promise.all(wordSet)\r\n    await getImages(translationSet).then(() => {\r\n      setInitial({ value: '', code: '' })\r\n      setPointerEvents('')\r\n    })\r\n  }\r\n\r\n  const haldleSubmit = async (e: { preventDefault: () => void }) => {\r\n    e.preventDefault()\r\n    setPointerEvents('active')\r\n    while (languageSet.size < languages.length) {\r\n      languageSet.add(languages[Math.floor(Math.random() * languages.length)])\r\n    }\r\n    languageSet.add({ code: 'es', lang: 'English' }) // lang is 'Spanish', this API does not allow to put two the same languages at a time.\r\n    getTranslation(languageSet)\r\n  }\r\n  return (\r\n    <>\r\n      <form action=\"get\" id=\"wordForm\" onSubmit={haldleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"initial\"\r\n          pattern=\"^[a-zA-Z]+$\"\r\n          required\r\n          value={initial.value}\r\n          onChange={(e) => setInitial({ value: e.target.value, code: 'en' })}\r\n        />\r\n        <button type=\"submit\" className={pointerEvents}>\r\n          submit\r\n        </button>\r\n      </form>\r\n      <div>\r\n        <h2 className=\"title\">language: {title.lang + ', title: ' + title.word}</h2>\r\n        Image: <img src={title.src} alt=\"\" className=\"image\" />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default Flower\r\n\r\n\r\n\r\n/* useEffect(() => {\r\n  // first variant with generators, native js;\r\n  let form = document.getElementById('wordForm'),\r\n  title = document.querySelector('.title'),\r\n  image = document.querySelector('.image'),\r\n  lung = [{ 'code': 'fr', 'name': 'French' },\r\n  { 'code': 'it', 'name': 'Italian' },\r\n  { 'code': 'de', 'name': 'Dutch' },\r\n  { 'code': 'ja', 'name': 'Japanese' },\r\n  { 'code': 'ru', 'name': 'Russian' },\r\n  { 'code': 'uk', 'name': 'Ukrainian' },\r\n  { 'code': 'ar', 'name': 'Arabic' },\r\n  { 'code': 'zh', 'name': 'Chinese' }],\r\n  set = new Set([{ 'code': 'en', 'name': 'English' }]),\r\n  initialValue = '',\r\n  initialCode = 'en-GB',\r\n  imgSrc = ''\r\n\r\nasync function* handleTextInput() {\r\n  for await (let itemSet of set) {\r\n      console.log(set)\r\n      await fetch(`https://api.mymemory.translated.net/get?q=${initialValue}&langpair=${initialCode}|${itemSet.code}`)\r\n          .then(response => response.json())\r\n          .then(result => {\r\n              initialValue = result.responseData.translatedText\r\n              initialCode = itemSet.code\r\n              fetch(`https://api.pexels.com/v1/search?query=${initialValue}&per_page=1`, {\r\n                  \"headers\": {\r\n                      \"Authorization\": \"563492ad6f91700001000001173c2e1310614e4c9a6b3f0fe56afc68\",\r\n                      \"Host\": \"https://andreypost.github.io/google-search/\"\r\n                  }\r\n              })\r\n                  .then(response => response.json())\r\n                  .then(items => imgSrc = items.photos[0].src.medium)\r\n                  .catch(err => console.log(err))\r\n          })\r\n          .catch(err => console.log(err))\r\n      await new Promise(resolve => setTimeout(resolve, 2000))\r\n      yield [initialValue, imgSrc, itemSet.name]\r\n  }\r\n}\r\nform.onsubmit = (e) => {\r\n  e.preventDefault()\r\n  form.elements[1].style.pointerEvents = 'none'\r\n  initialValue = form.initial.value\r\n\r\n  while (set.size < lung.length - 3) {\r\n      set.add(lung[Math.floor(Math.random() * lung.length)])\r\n  }\r\n\r\n  (async () => {\r\n      for await (let [value, src, lung] of handleTextInput()) {\r\n          title.innerHTML = `${lung} : ` + value\r\n          image.src = src\r\n      }\r\n      form.elements[1].style.pointerEvents = 'unset'\r\n      form.reset()\r\n  })()\r\n}\r\n}, [])\r\n*/"],"sourceRoot":""}